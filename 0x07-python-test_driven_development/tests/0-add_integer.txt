
<+How to Use 0-add_integer.py
===========================

This module defines A function for adding integers. ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the result obtained by adding the two arguments is equivalent to the value obtained by using the addition operation for numbers.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3


The function is also compatible with floating-point values.

::

    >>> add_integer(3.0, 3.0)
    6

Please note that floating-point numbers are converted to integers before the addition operation is carried out.

::

    >>> add_integer(2.9, 0.2)
    3


Floating-point and non-floating-point values can be mixed or combined..

::

    >>> add_integer(2.3, -4)
    -2

The second argument is optional - by default, it is 98.

::

    >>> add_integer(2)
    100

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hi", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "three")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer


